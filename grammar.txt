<program>               ::= (<w>* <function_definition> <w>*)*
<function_definition>   ::= "fn" <w>+ <identifier> <paren_open> <parameter_list>? <paren_close> ":" <w>* <type> <w>* <block>
<parameter_list>        ::= <parameter> (<comma> <parameter>)*
<parameter>             ::= <identifier> <w>* ":" <w>* <type>
<type>                  ::= ("int" | "char") <pointer_suffix>?
<pointer_suffix>        ::= "*" <pointer_suffix>?
<block>                 ::=  "{" <w>* (<statement> <w>*)* <w>* "}"
<statement>             ::= <return_statement> | <assert_statement> | <expression_statement> | <if_statement> | <declaration_statement> | <assignment_statement>
<if_statement>          ::= "if" <w>* <expression> <w>* <block> <w>* <else_statement>?
<else_statement>        ::= ("else" <w>* <block> <w>*) | ("el" <if_statement>)
<return_statement>      ::= "return" <w>+ <expression> <w>* <end_of_statement>
<assert_statement>      ::= "assert" <w>+ <expression> <w>* <end_of_statement>
<declaration_statement> ::= "let" <w>+ <identifier> <w>* ":" <w>* <type> <w>* <end_of_statement>
<assignment_statement>  ::= <identifier> <equal> <expression> <w>* <end_of_statement>
<expression_statement>  ::= <expression> <w>* <end_of_statement>
<end_of_statement>      ::= ";"
<primary_expression>    ::= <constant> | <identifier> | <function_call>
<expression>            ::= <primary_expression> | <addition> | <substraction> | <multiplication> | <modulo> | <division> | <equals>
<addition>              ::= <expression> <plus> <expression>
<substraction>          ::= <expression> <minus> <expression>
<multiplication>        ::= <expression> <star> <expression>
<modulo>                ::= <expression> <percent> <expression>
<division>              ::= <expression> <slash> <expression>
<equals>                ::= <expression> <equalequal> <expression>
<constant>              ::= <number>
<number>                ::= <digit>+
<function_call>         ::= <identifier> <paren_open> <function_args>? <paren_close>
<function_args>         ::= <expression> (<comma> <expression>)*
<identifier>            ::= (<letter> | "_") <identifier_rest>*
<identifier_rest>       ::= <letter> | <digit> | "_"
<letter>                ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<digit>                 ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<w>                     ::= " " | "\t" | "\n"
<plus>                  ::= <w>* "+" <w>*
<minus>                 ::= <w>* "-" <w>*
<star>                  ::= <w>* "*" <w>*
<percent>               ::= <w>* "%" <w>*
<slash>                 ::= <w>* "/" <w>*
<equalequal>            ::= <w>* "=" "=" <w>*
<equal>                 ::= <w>* "=" <w>*
<paren_open>            ::= <w>* "(" <w>*
<paren_close>           ::= <w>* ")" <w>*
<comma>                 ::= <w>* "," <w>*
